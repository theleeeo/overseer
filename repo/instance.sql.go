// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: instance.sql

package repo

import (
	"context"
)

const createInstance = `-- name: CreateInstance :one
INSERT INTO instances (environment_id, application_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateInstanceParams struct {
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

// Create an instance
func (q *Queries) CreateInstance(ctx context.Context, arg CreateInstanceParams) (int32, error) {
	row := q.db.QueryRow(ctx, createInstance, arg.EnvironmentID, arg.ApplicationID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const listInstances = `-- name: ListInstances :many
SELECT
  id,
  environment_id,
  application_id,
  name
FROM instances
WHERE name = $1 OR $1 IS NULL
`

type ListInstancesRow struct {
	ID            int32  `json:"id"`
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

func (q *Queries) ListInstances(ctx context.Context, name string) ([]ListInstancesRow, error) {
	rows, err := q.db.Query(ctx, listInstances, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListInstancesRow
	for rows.Next() {
		var i ListInstancesRow
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.ApplicationID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstance = `-- name: UpdateInstance :exec
UPDATE instances
SET name = $2
WHERE id = $1
`

type UpdateInstanceParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateInstance(ctx context.Context, arg UpdateInstanceParams) error {
	_, err := q.db.Exec(ctx, updateInstance, arg.ID, arg.Name)
	return err
}
