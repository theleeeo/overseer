// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: instance.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInstance = `-- name: CreateInstance :one
INSERT INTO instances (environment_id, application_id, name)
VALUES ($1, $2, $3)
RETURNING id
`

type CreateInstanceParams struct {
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

// Create an instance
func (q *Queries) CreateInstance(ctx context.Context, arg CreateInstanceParams) (int32, error) {
	row := q.db.QueryRow(ctx, createInstance, arg.EnvironmentID, arg.ApplicationID, arg.Name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteInstance = `-- name: DeleteInstance :exec
DELETE FROM instances
WHERE id = $1
`

func (q *Queries) DeleteInstance(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteInstance, id)
	return err
}

const getInstance = `-- name: GetInstance :one
SELECT
  i.id,
  i.environment_id,
  i.application_id,
  i.name
FROM instances i
WHERE i.id = $1
`

type GetInstanceRow struct {
	ID            int32  `json:"id"`
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

// SELECT
//
//	i.id,
//	i.environment_id,
//	i.application_id,
//	i.name
//
// FROM instances i
// WHERE i.id = $1
//
//	OR (i.environment_id = $2 AND i.application_id = $3)
//
// LIMIT 1;
func (q *Queries) GetInstance(ctx context.Context, id int32) (GetInstanceRow, error) {
	row := q.db.QueryRow(ctx, getInstance, id)
	var i GetInstanceRow
	err := row.Scan(
		&i.ID,
		&i.EnvironmentID,
		&i.ApplicationID,
		&i.Name,
	)
	return i, err
}

const listInstances = `-- name: ListInstances :many
SELECT
  id,
  environment_id,
  application_id,
  name
FROM instances
WHERE name = $1 OR $1=''
`

type ListInstancesRow struct {
	ID            int32  `json:"id"`
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

func (q *Queries) ListInstances(ctx context.Context, name string) ([]ListInstancesRow, error) {
	rows, err := q.db.Query(ctx, listInstances, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListInstancesRow
	for rows.Next() {
		var i ListInstancesRow
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.ApplicationID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listInstancesAndDeployment = `-- name: ListInstancesAndDeployment :many

SELECT
  i.id,
  i.environment_id,
  i.application_id,
  i.name,
  d.version,
  d.deployed_at
FROM instances i
LEFT JOIN deployments d ON i.id = d.instance_id
  AND d.deployed_at = (SELECT MAX(deployed_at) FROM deployments WHERE instance_id = i.id)
`

type ListInstancesAndDeploymentRow struct {
	ID            int32              `json:"id"`
	EnvironmentID int32              `json:"environment_id"`
	ApplicationID int32              `json:"application_id"`
	Name          string             `json:"name"`
	Version       pgtype.Text        `json:"version"`
	DeployedAt    pgtype.Timestamptz `json:"deployed_at"`
}

// filter by name if provided
// List instances along with their latest deployments
func (q *Queries) ListInstancesAndDeployment(ctx context.Context) ([]ListInstancesAndDeploymentRow, error) {
	rows, err := q.db.Query(ctx, listInstancesAndDeployment)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListInstancesAndDeploymentRow
	for rows.Next() {
		var i ListInstancesAndDeploymentRow
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.ApplicationID,
			&i.Name,
			&i.Version,
			&i.DeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInstance = `-- name: UpdateInstance :exec
UPDATE instances
SET name = $2
WHERE id = $1
`

type UpdateInstanceParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateInstance(ctx context.Context, arg UpdateInstanceParams) error {
	_, err := q.db.Exec(ctx, updateInstance, arg.ID, arg.Name)
	return err
}
