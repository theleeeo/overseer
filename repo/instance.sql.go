// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: instance.sql

package repo

import (
	"context"
)

const listInstances = `-- name: ListInstances :many
SELECT
  id,
  environment_id,
  application_id,
  name
FROM instances
`

type ListInstancesRow struct {
	ID            int32  `json:"id"`
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

func (q *Queries) ListInstances(ctx context.Context) ([]ListInstancesRow, error) {
	rows, err := q.db.Query(ctx, listInstances)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListInstancesRow
	for rows.Next() {
		var i ListInstancesRow
		if err := rows.Scan(
			&i.ID,
			&i.EnvironmentID,
			&i.ApplicationID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertInstance = `-- name: UpsertInstance :exec
INSERT INTO instances (environment_id, application_id, name)
VALUES ($1, $2, $3)
ON CONFLICT (instance_id)
DO UPDATE
SET 
  name = EXCLUDED.name
`

type UpsertInstanceParams struct {
	EnvironmentID int32  `json:"environment_id"`
	ApplicationID int32  `json:"application_id"`
	Name          string `json:"name"`
}

// Upsert an instance
func (q *Queries) UpsertInstance(ctx context.Context, arg UpsertInstanceParams) error {
	_, err := q.db.Exec(ctx, upsertInstance, arg.EnvironmentID, arg.ApplicationID, arg.Name)
	return err
}
