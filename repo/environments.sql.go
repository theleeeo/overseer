// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: environments.sql

package repo

import (
	"context"
)

const createEnvironment = `-- name: CreateEnvironment :one
INSERT INTO environments (name, sort_order)
VALUES ($1,
        COALESCE((SELECT MAX(sort_order) + 1 FROM environments), 1))
RETURNING id, name, sort_order
`

func (q *Queries) CreateEnvironment(ctx context.Context, name string) (Environment, error) {
	row := q.db.QueryRow(ctx, createEnvironment, name)
	var i Environment
	err := row.Scan(&i.ID, &i.Name, &i.SortOrder)
	return i, err
}

const deleteEnvironment = `-- name: DeleteEnvironment :exec
DELETE FROM environments
WHERE id = $1
`

func (q *Queries) DeleteEnvironment(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteEnvironment, id)
	return err
}

const getEnvironment = `-- name: GetEnvironment :one
SELECT id, name, sort_order
FROM environments
WHERE id = $1
ORDER BY sort_order
`

func (q *Queries) GetEnvironment(ctx context.Context, id int32) (Environment, error) {
	row := q.db.QueryRow(ctx, getEnvironment, id)
	var i Environment
	err := row.Scan(&i.ID, &i.Name, &i.SortOrder)
	return i, err
}

const listEnvironments = `-- name: ListEnvironments :many
SELECT id, name, sort_order
FROM environments
ORDER BY sort_order, id
`

func (q *Queries) ListEnvironments(ctx context.Context) ([]Environment, error) {
	rows, err := q.db.Query(ctx, listEnvironments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Environment
	for rows.Next() {
		var i Environment
		if err := rows.Scan(&i.ID, &i.Name, &i.SortOrder); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reorderEnvironments = `-- name: ReorderEnvironments :exec
UPDATE environments AS e
SET sort_order = u.ord
FROM UNNEST($1::int[]) WITH ORDINALITY AS u(id, ord)
WHERE e.id = u.id
`

// Bulk reorder: pass IDs in desired order
func (q *Queries) ReorderEnvironments(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, reorderEnvironments, dollar_1)
	return err
}

const updateEnvironment = `-- name: UpdateEnvironment :one
UPDATE environments
SET name = $2,
    sort_order = $3
WHERE id = $1
RETURNING id, name, sort_order
`

type UpdateEnvironmentParams struct {
	ID        int32  `json:"id"`
	Name      string `json:"name"`
	SortOrder int32  `json:"sort_order"`
}

func (q *Queries) UpdateEnvironment(ctx context.Context, arg UpdateEnvironmentParams) (Environment, error) {
	row := q.db.QueryRow(ctx, updateEnvironment, arg.ID, arg.Name, arg.SortOrder)
	var i Environment
	err := row.Scan(&i.ID, &i.Name, &i.SortOrder)
	return i, err
}
