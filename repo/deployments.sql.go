// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: deployments.sql

package repo

import (
	"context"
)

const listDeploymentsFlat = `-- name: ListDeploymentsFlat :many
SELECT
  environment_id,
  application_id,
  version,
  deployed_at
FROM deployments
`

func (q *Queries) ListDeploymentsFlat(ctx context.Context) ([]Deployment, error) {
	rows, err := q.db.Query(ctx, listDeploymentsFlat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Deployment
	for rows.Next() {
		var i Deployment
		if err := rows.Scan(
			&i.EnvironmentID,
			&i.ApplicationID,
			&i.Version,
			&i.DeployedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertDeployment = `-- name: UpsertDeployment :one
INSERT INTO deployments (environment_id, application_id, version, deployed_at)
VALUES ($1, $2, $3, COALESCE($4, now()))
ON CONFLICT (environment_id, application_id)
DO UPDATE
SET version = EXCLUDED.version,
    deployed_at = EXCLUDED.deployed_at
RETURNING environment_id, application_id, version, deployed_at
`

type UpsertDeploymentParams struct {
	EnvironmentID int32       `json:"environment_id"`
	ApplicationID int32       `json:"application_id"`
	Version       string      `json:"version"`
	Column4       interface{} `json:"column_4"`
}

// Upsert a deployment (create or update version/timestamp)
func (q *Queries) UpsertDeployment(ctx context.Context, arg UpsertDeploymentParams) (Deployment, error) {
	row := q.db.QueryRow(ctx, upsertDeployment,
		arg.EnvironmentID,
		arg.ApplicationID,
		arg.Version,
		arg.Column4,
	)
	var i Deployment
	err := row.Scan(
		&i.EnvironmentID,
		&i.ApplicationID,
		&i.Version,
		&i.DeployedAt,
	)
	return i, err
}
