// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: deployments.sql

package repo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const listDeployments = `-- name: ListDeployments :many
SELECT
  instance_id,
  version,
  deployed_at
FROM deployments
`

type ListDeploymentsRow struct {
	InstanceID int32              `json:"instance_id"`
	Version    string             `json:"version"`
	DeployedAt pgtype.Timestamptz `json:"deployed_at"`
}

func (q *Queries) ListDeployments(ctx context.Context) ([]ListDeploymentsRow, error) {
	rows, err := q.db.Query(ctx, listDeployments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListDeploymentsRow
	for rows.Next() {
		var i ListDeploymentsRow
		if err := rows.Scan(&i.InstanceID, &i.Version, &i.DeployedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertDeployment = `-- name: UpsertDeployment :exec
INSERT INTO deployments (instance_id, version, deployed_at)
VALUES ($1, $2, $3)
ON CONFLICT (environment_id, application_id)
DO UPDATE
SET version = EXCLUDED.version,
    deployed_at = EXCLUDED.deployed_at
`

type UpsertDeploymentParams struct {
	InstanceID int32              `json:"instance_id"`
	Version    string             `json:"version"`
	DeployedAt pgtype.Timestamptz `json:"deployed_at"`
}

// Upsert a deployment (create or update version/timestamp)
func (q *Queries) UpsertDeployment(ctx context.Context, arg UpsertDeploymentParams) error {
	_, err := q.db.Exec(ctx, upsertDeployment, arg.InstanceID, arg.Version, arg.DeployedAt)
	return err
}
