// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: applications.sql

package repo

import (
	"context"
)

const createApplication = `-- name: CreateApplication :one
INSERT INTO applications (name, sort_order)
VALUES ($1,
        COALESCE((SELECT MAX(sort_order) + 1 FROM applications), 1))
RETURNING id, name, sort_order
`

func (q *Queries) CreateApplication(ctx context.Context, name string) (Application, error) {
	row := q.db.QueryRow(ctx, createApplication, name)
	var i Application
	err := row.Scan(&i.ID, &i.Name, &i.SortOrder)
	return i, err
}

const deleteApplication = `-- name: DeleteApplication :exec
DELETE FROM applications
WHERE id = $1
`

func (q *Queries) DeleteApplication(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteApplication, id)
	return err
}

const getApplication = `-- name: GetApplication :one
SELECT id, name, sort_order
FROM applications
WHERE id = $1
ORDER BY sort_order
`

func (q *Queries) GetApplication(ctx context.Context, id int32) (Application, error) {
	row := q.db.QueryRow(ctx, getApplication, id)
	var i Application
	err := row.Scan(&i.ID, &i.Name, &i.SortOrder)
	return i, err
}

const listApplications = `-- name: ListApplications :many
SELECT id, name, sort_order
FROM applications
ORDER BY sort_order, id
`

func (q *Queries) ListApplications(ctx context.Context) ([]Application, error) {
	rows, err := q.db.Query(ctx, listApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Application
	for rows.Next() {
		var i Application
		if err := rows.Scan(&i.ID, &i.Name, &i.SortOrder); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const reorderApplications = `-- name: ReorderApplications :exec
UPDATE applications AS a
SET sort_order = u.ord
FROM UNNEST($1::int[]) WITH ORDINALITY AS u(id, ord)
WHERE a.id = u.id
`

// Bulk reorder: pass IDs in desired order (first element gets sort_order=1, etc.)
func (q *Queries) ReorderApplications(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, reorderApplications, dollar_1)
	return err
}

const updateApplication = `-- name: UpdateApplication :one
UPDATE applications
SET name = $2
WHERE id = $1
RETURNING id, name, sort_order
`

type UpdateApplicationParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateApplication(ctx context.Context, arg UpdateApplicationParams) (Application, error) {
	row := q.db.QueryRow(ctx, updateApplication, arg.ID, arg.Name)
	var i Application
	err := row.Scan(&i.ID, &i.Name, &i.SortOrder)
	return i, err
}
